version: '3'

# Define environment variables used across tasks
env:
  VERSION: '0.1.0'
  KO_DOCKER_REPO: '{{default "kind.local" .KO_DOCKER_REPO}}'

tasks:
  default:
    cmds:
      - task -l
    desc: Lists all available tasks

  build:
    desc: Build the template-resolver binary
    cmds:
      - go build -o bin/template-resolver ./cmd/template-resolver
    generates:
      - bin/template-resolver

  test:
    desc: Run all tests
    cmds:
      - go test ./...
    sources:
      - '**/*.go'

  test:coverage:
    desc: Run tests with coverage report
    cmds:
      - go test ./... -coverprofile=coverage.out
      - go tool cover -html=coverage.out -o coverage.html
      - '{{if eq OS "darwin"}}open{{else}}xdg-open{{end}} coverage.html'

  lint:
    desc: Run golangci-lint on the codebase
    deps: [lint:install]
    cmds:
      - $(go env GOPATH)/bin/golangci-lint run
      
  lint:install:
    desc: Install golangci-lint v2 as a development dependency
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.2
      - echo "golangci-lint v2 installed successfully at $(go env GOPATH)/bin/golangci-lint"
    status:
      - which golangci-lint >/dev/null 2>&1 || test -f $(go env GOPATH)/bin/golangci-lint

  container:build:
    desc: Build the container image using ko
    cmds:
      - ko build -B thrivemarket.com/template-resolver/cmd/template-resolver
    env:
      KO_DOCKER_REPO: "{{.KO_DOCKER_REPO}}"
      
  container:test:
    desc: Test if git is installed in the container image
    cmds:
      - |
        echo "Testing git installation in the container image..."
        
        # Build the image directly with docker
        echo "Building with docker..."
        docker build -t template-resolver-test:latest .
        
        # Create a Docker container to test git
        echo "Creating test container from template-resolver-test:latest..."
        CONTAINER_ID=$(docker create --entrypoint /usr/bin/git template-resolver-test:latest --version || echo 'Git not found')
        
        # Start the container
        docker start $CONTAINER_ID
        
        # Wait for container to finish (with timeout)
        timeout 10s docker wait $CONTAINER_ID || (docker kill $CONTAINER_ID > /dev/null && echo "Test timed out")
        
        # Get the output
        OUTPUT=$(docker logs $CONTAINER_ID)
        echo "Test output: $OUTPUT"
        
        # Clean up the container
        docker rm $CONTAINER_ID > /dev/null
        
        # Check if git exists
        if [[ "$OUTPUT" == *"Git not found"* ]]; then
          echo "❌ Git is NOT available in the container"
          exit 1
        elif [[ "$OUTPUT" == *"git version"* ]]; then
          echo "✅ Git is successfully installed in the container"
          
          # Now test for SSH
          echo "Testing SSH installation..."
          # Run the container with sh to capture both stdout and stderr
          SSH_CONTAINER_ID=$(docker create --entrypoint /bin/sh template-resolver-test:latest -c "ssh -V 2>&1")
          docker start $SSH_CONTAINER_ID
          timeout 10s docker wait $SSH_CONTAINER_ID || (docker kill $SSH_CONTAINER_ID > /dev/null && echo "SSH test timed out")
          SSH_OUTPUT=$(docker logs $SSH_CONTAINER_ID)
          docker rm $SSH_CONTAINER_ID > /dev/null
          
          echo "SSH test output: $SSH_OUTPUT"
          
          if [[ "$SSH_OUTPUT" == *"OpenSSH"* ]]; then
            echo "✅ SSH is successfully installed in the container"
            exit 0
          else
            echo "❌ SSH is NOT available in the container"
            exit 1
          fi
        else
          echo "❓ Inconclusive test result"
          exit 1
        fi

  container:deploy:
    desc: Deploy template-resolver to Kubernetes cluster
    deps: [container:build]
    cmds:
      - ko apply -f config/

  mod:tidy:
    desc: Tidy up the go.mod file
    cmds:
      - go mod tidy

  setup:kind:
    desc: Set up a local Kind cluster for development
    cmds:
      - |
        if ! kind get clusters | grep -q template-resolver; then
          kind create cluster --name template-resolver
        else
          echo "Cluster already exists"
        fi
      - task install:tekton
    
  install:tekton:
    desc: Install Tekton Pipelines in the current cluster
    cmds:
      - |
        # Verify cluster connectivity first
        echo "Verifying cluster connectivity..."
        if ! kubectl cluster-info >/dev/null 2>&1; then
          echo "Error: Cannot connect to Kubernetes cluster. Please check your kubeconfig."
          exit 1
        fi

        # Check which version of Tekton is recommended
        echo "Installing Tekton Pipelines..."
        kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
        
        # Ensure the namespace is created
        echo "Waiting for Tekton namespace to be created..."
        counter=0
        max_retries=30
        while [ $counter -lt $max_retries ] && ! kubectl get namespace tekton-pipelines >/dev/null 2>&1; do
          echo "Waiting for tekton-pipelines namespace (attempt $((counter+1))/$max_retries)..."
          sleep 3
          counter=$((counter + 1))
        done
        
        # Exit early if namespace never got created
        if [ $counter -eq $max_retries ]; then
          echo "Error: Tekton namespace was not created within the timeout period."
          echo "Continuing anyway to see if we can recover..."
        else
          echo "✓ Tekton namespace created successfully."
        fi
        
        # Wait for the controller deployment
        echo "Waiting for Tekton controller deployment..."
        counter=0
        max_retries=30
        while [ $counter -lt $max_retries ] && ! kubectl get deployment tekton-pipelines-controller -n tekton-pipelines >/dev/null 2>&1; do
          echo "Waiting for controller deployment (attempt $((counter+1))/$max_retries)..."
          sleep 3
          counter=$((counter + 1))
          
          # Verify cluster connectivity during waiting
          if ! kubectl cluster-info >/dev/null 2>&1; then
            echo "Error: Lost connection to Kubernetes cluster during installation."
            exit 1
          fi
        done
        
        # Exit early if deployment never got created
        if [ $counter -eq $max_retries ]; then
          echo "Warning: Tekton controller deployment was not created within the timeout period."
          echo "Continuing anyway to see if we can recover..."
        else
          echo "✓ Tekton controller deployment created successfully."
        fi
        
        # Wait for the controller to be available
        echo "Waiting for Tekton controller pods to be ready..."
        if kubectl wait --for=condition=available deployment/tekton-pipelines-controller -n tekton-pipelines --timeout=180s; then
          echo "✓ Tekton controller is now available."
        else
          echo "Warning: Timeout waiting for controller deployment, but continuing..."
        fi

  run:example:
    desc: Run an example pipeline using the template-resolver
    deps: [container:deploy]
    cmds:
      - |
        # Define the PipelineRun name for consistent reference
        PIPELINE_RUN_NAME="example-app-deployment"
        
        # Delete any existing PipelineRun with the same name
        echo "Cleaning up any existing PipelineRun..."
        kubectl delete pipelinerun $PIPELINE_RUN_NAME --ignore-not-found=true
        
        # Wait a moment for resources to be released
        sleep 2
        
        # Apply the new PipelineRun
        echo "Creating new PipelineRun '$PIPELINE_RUN_NAME'..."
        kubectl apply -f examples/usage-example.yaml
        
        # Wait for the PipelineRun to be created
        echo "Waiting for PipelineRun to be created..."
        COUNTER=0
        while [ $COUNTER -lt 10 ]; do
          if kubectl get pipelinerun $PIPELINE_RUN_NAME >/dev/null 2>&1; then
            echo "PipelineRun '$PIPELINE_RUN_NAME' created successfully"
            break
          fi
          sleep 1
          COUNTER=$((COUNTER+1))
        done
        
        if [ $COUNTER -eq 10 ]; then
          echo "ERROR: Timed out waiting for PipelineRun to be created"
          exit 1
        fi
        
        # Wait for the run to complete with specific name
        echo "Waiting for PipelineRun '$PIPELINE_RUN_NAME' to succeed..."
        if kubectl wait --for=condition=succeeded "pipelinerun/$PIPELINE_RUN_NAME" --timeout=180s; then
          echo "PipelineRun succeeded!"
          
          # Show detailed output
          echo "PipelineRun details:"
          kubectl describe pipelinerun $PIPELINE_RUN_NAME
        else
          echo "PipelineRun failed or timed out"
          kubectl describe pipelinerun $PIPELINE_RUN_NAME
          exit 1
        fi

  clean:
    desc: Clean up build artifacts
    cmds:
      - rm -rf bin/ coverage.out coverage.html

  test:e2e:
    desc: Run end-to-end tests
    deps: [setup:kind, container:deploy]
    cmds:
      - task run:pipelinerun

  upgrade:deps:
    desc: Upgrade dependencies to latest versions
    cmds:
      - go get -u all
      - go mod tidy

  goreleaser:snapshot:
    desc: Create a snapshot release with goreleaser
    cmds:
      - goreleaser release --snapshot --rm-dist
      
  update:
    desc: Update GitHub Gist template and deploy to local cluster for testing
    cmds:
      - |
        echo "===== Updating GitHub Gist ====="
        # Configuration
        GIST_ID="dfddf710d7884f997f0b648a07d7619c"
        TEMPLATE_FILE="examples/templates/simple.yaml"
        
        # Check if template exists
        if [ ! -f "$TEMPLATE_FILE" ]; then
          echo "Error: Template file $TEMPLATE_FILE not found"
          exit 1
        fi
        
        # Check if gh CLI is installed
        if ! command -v gh &> /dev/null; then
          echo "Error: GitHub CLI (gh) is not installed or not in PATH"
          echo "Install from: https://cli.github.com/"
          exit 1
        fi
        
        # Check if authenticated with GitHub
        if ! gh auth status &> /dev/null; then
          echo "Error: Not authenticated with GitHub. Run 'gh auth login' first."
          exit 1
        fi
        
        # Update the gist
        echo "Updating Gist $GIST_ID with content from $TEMPLATE_FILE..."
        gh gist edit "$GIST_ID" -f simple.yaml "$TEMPLATE_FILE"
        
        echo "Gist updated successfully!"
        echo "URL: https://gist.github.com/justinabrahms/$GIST_ID"
        

  run:pipelinerun:
    desc: Delete & recreate the pipelinerun
    cmds:
      - |
        echo ""
        echo "===== Testing Locally ====="
        
        echo "Building the template resolver..."
        IMAGE_URL=$(ko build thrivemarket.com/template-resolver/cmd/template-resolver)
        echo "Built image: $IMAGE_URL"
        
        echo "Updating deployment.yaml with the new image..."
        # Create a temporary file with the updated image
        TMP_FILE=$(mktemp)
        cat config/deployment.yaml | awk -v img="$IMAGE_URL" '{
          if ($1 == "image:") {
            print "        image: " img;
          } else {
            print $0;
          }
        }' > $TMP_FILE
        
        # Replace the original file with the updated one
        cp $TMP_FILE config/deployment.yaml
        rm $TMP_FILE
        
        echo "Redeploying the resolver..."
        kubectl delete deployment template-resolver -n tekton-pipelines-resolvers --ignore-not-found=true
        kubectl apply -f config/deployment.yaml
        
        echo "Waiting for resolver to start..."
        kubectl wait --for=condition=available deployment/template-resolver -n tekton-pipelines-resolvers --timeout=60s
        
        echo "Applying test request..."
        kubectl delete resolutionrequest test-request --ignore-not-found=true
        kubectl apply -f test-request.yaml
        
        echo "Waiting for resolution..."
        sleep 5
        
        echo "Resolution result:"
        STATUS=$(kubectl get resolutionrequest test-request -o jsonpath='{.status.conditions[0].status}')
        REASON=$(kubectl get resolutionrequest test-request -o jsonpath='{.status.conditions[0].reason}')
        
        echo "Status: $STATUS"
        echo "Reason: $REASON"
        
        if [ "$STATUS" == "True" ]; then
          echo "Resolution succeeded!"
          DATA=$(kubectl get resolutionrequest test-request -o jsonpath='{.status.data}')
          echo "Decoded template data:"
          echo $DATA | base64 -d | head -n 20
          echo "... (truncated)"
        else
          echo "Resolution failed. Checking logs..."
          RESOLVER_POD=$(kubectl get pods -n tekton-pipelines-resolvers -l app=template-resolver -o jsonpath='{.items[0].metadata.name}')
          kubectl logs -n tekton-pipelines-resolvers $RESOLVER_POD --tail=50
        fi
        
        echo ""
        echo "Update and test process completed!"

        # Define the PipelineRun name for consistent reference
        PIPELINE_RUN_NAME="example-app-deployment"
        
        # Delete any existing PipelineRun with the same name
        echo "Cleaning up any existing PipelineRun..."
        kubectl delete pipelinerun $PIPELINE_RUN_NAME --ignore-not-found=true
        
        # Wait a moment for resources to be released
        sleep 2
        
        # Apply the test resources
        echo "Creating test PipelineRun '$PIPELINE_RUN_NAME'..."
        kubectl apply -f examples/usage-example.yaml
        
        # Wait for the PipelineRun to be created
        echo "Waiting for PipelineRun to be created..."
        COUNTER=0
        while [ $COUNTER -lt 10 ]; do
          if kubectl get pipelinerun $PIPELINE_RUN_NAME >/dev/null 2>&1; then
            echo "PipelineRun '$PIPELINE_RUN_NAME' created successfully"
            break
          fi
          sleep 1
          COUNTER=$((COUNTER+1))
        done
        
        if [ $COUNTER -eq 10 ]; then
          echo "ERROR: Timed out waiting for PipelineRun to be created"
          exit 1
        fi
        
        # Wait for the run to complete with specific name
        echo "Waiting for PipelineRun '$PIPELINE_RUN_NAME' to succeed..."
        if kubectl wait --for=condition=succeeded "pipelinerun/$PIPELINE_RUN_NAME" --timeout=300s; then
          echo "End-to-End test passed!"
          kubectl get pipelinerun $PIPELINE_RUN_NAME -o jsonpath='{.status.conditions[0].message}'
          exit 0
        else
          # Check if the failure was due to timeout
          echo '+---------------------------------------------+\n|  !!!  ERROR: E2E TEST FAILED  !!!          |\n|                                             |\n|  Checking resolver logs and status...       |\n+---------------------------------------------+\n'
          
          # Print the resolver pod logs
          RESOLVER_POD=$(kubectl get pods -n tekton-pipelines-resolvers -l app=template-resolver -o name | head -1)
          if [ -n "$RESOLVER_POD" ]; then
            echo "Resolver pod logs:"
            kubectl logs -n tekton-pipelines-resolvers $RESOLVER_POD
          fi
          
          # Get details about the resolution request
          REQUESTS=$(kubectl get resolutionrequests -o name)
          if [ -n "$REQUESTS" ]; then
            echo "Resolution requests found:"
            for REQ in $REQUESTS; do
              echo "Details for $REQ:"
              kubectl get $REQ -o yaml
            done
          fi
          
          # Print PipelineRun details
          echo "PipelineRun details:"
          kubectl describe pipelinerun $PIPELINE_RUN_NAME
          
          exit 1
        fi
      
  run:request:
    desc: Delete, recreate, and inspect a resolution request
    cmds:
      - |
        # Define ResolutionRequest name to inspect
        PIPELINE_RUN_NAME="example-app-deployment"
        
        # Delete any existing PipelineRun with the same name to ensure a fresh start
        echo "Cleaning up any existing PipelineRun..."
        kubectl delete pipelinerun $PIPELINE_RUN_NAME --ignore-not-found=true
        
        # Wait a moment for resources to be released
        sleep 2
        
        # Apply the new PipelineRun
        echo "Creating new PipelineRun '$PIPELINE_RUN_NAME'..."
        kubectl apply -f examples/usage-example.yaml
        
        # Wait for resolution request creation
        echo "Waiting for ResolutionRequest to be created..."
        sleep 5
        
        # Wait a bit longer to ensure ResolutionRequest is created
        echo "Waiting a bit longer for resources to be processed..."
        sleep 5
        
        # List all ResolutionRequests and get the most recent one
        echo "Finding the most recent ResolutionRequest..."
        RESOLUTION_REQUESTS=$(kubectl get resolutionrequest -o name)
        
        if [ -z "$RESOLUTION_REQUESTS" ]; then
          echo "ERROR: No ResolutionRequests found"
          echo "Checking PipelineRun status:"
          kubectl describe pipelinerun $PIPELINE_RUN_NAME
          exit 1
        fi
        
        # Get the most recent ResolutionRequest
        RESOLUTION_REQUEST=$(kubectl get resolutionrequest --sort-by=.metadata.creationTimestamp -o name | tail -n 1)
        RESOLUTION_REQUEST=${RESOLUTION_REQUEST#*/}
        
        echo "Found ResolutionRequest: $RESOLUTION_REQUEST"
        
        # Get status and data from ResolutionRequest
        STATUS=$(kubectl get resolutionrequest $RESOLUTION_REQUEST -o jsonpath='{.status.conditions[0].status}')
        REASON=$(kubectl get resolutionrequest $RESOLUTION_REQUEST -o jsonpath='{.status.conditions[0].reason}')
        MESSAGE=$(kubectl get resolutionrequest $RESOLUTION_REQUEST -o jsonpath='{.status.conditions[0].message}')
        
        echo ""
        echo "Status: $STATUS"
        echo "Reason: $REASON"
        echo "Message: $MESSAGE"
        echo ""
        
        # If successful, get and decode the data
        if [ "$STATUS" == "True" ]; then
          echo "Resolution succeeded, retrieving data..."
          DATA=$(kubectl get resolutionrequest $RESOLUTION_REQUEST -o jsonpath='{.status.data}')
          echo "Decoded resolution data:"
          echo $DATA | base64 -d
        else
          echo "Resolution failed. Checking template-resolver logs for more details..."
          RESOLVER_POD=$(kubectl get pods -n tekton-pipelines-resolvers -l app=template-resolver -o jsonpath='{.items[0].metadata.name}')
          if [ -n "$RESOLVER_POD" ]; then
            echo "------------------ TEMPLATE RESOLVER LOGS ------------------"
            kubectl logs -n tekton-pipelines-resolvers $RESOLVER_POD --tail=50
            echo "------------------------------------------------------------"
          else
            echo "ERROR: Could not find template-resolver pod"
          fi
        fi
