name: Health Check

on:
  schedule:
    # Run daily at 1:00 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  health-check:
    name: Template Resolver Health Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Install ko
        run: |
          curl -L https://github.com/google/ko/releases/download/v0.13.0/ko_0.13.0_Linux_x86_64.tar.gz | tar xzf - ko
          chmod +x ./ko
          sudo mv ko /usr/local/bin/

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Set up KinD cluster
        run: task setup:kind

      - name: Build and deploy resolver
        run: |
          export KO_DOCKER_REPO=kind.local
          task container:deploy

      - name: Update GitHub Gist token for tests
        if: github.event_name != 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          # Authenticate with GitHub using the provided PAT
          echo "$GH_TOKEN" | gh auth login --with-token

      - name: Test with various template types
        run: |
          # Test with standard template
          task run:example
          
          # Test with a simple test request
          kubectl apply -f test-request.yaml
          sleep 5
          
          STATUS=$(kubectl get resolutionrequest test-request -o jsonpath='{.status.conditions[0].status}')
          if [ "$STATUS" != "True" ]; then
            echo "Simple template resolution failed!"
            kubectl get resolutionrequest test-request -o yaml
            exit 1
          else
            echo "Simple template resolution succeeded!"
          fi
          
      - name: Collect logs on failure
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          mkdir -p ./logs
          
          # Get template resolver logs
          PODS=$(kubectl get pods -n tekton-pipelines-resolvers -l app=template-resolver -o name)
          for POD in $PODS; do
            POD_NAME=${POD#*/}
            kubectl logs -n tekton-pipelines-resolvers $POD_NAME > ./logs/$POD_NAME.log
          done
          
          # Get resolution requests
          kubectl get resolutionrequest -o yaml > ./logs/resolutionrequests.yaml
          
          # Get pipeline runs
          kubectl get pipelinerun -o yaml > ./logs/pipelineruns.yaml
      
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-logs
          path: ./logs/