name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Permissions needed for GitHub workflows
permissions:
  contents: read
  packages: write
  id-token: write # Needed for keyless signing
  actions: read

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0
          args: --timeout=5m ./cmd/...

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Run tests
        run: go test ./... -v

      - name: Generate coverage report
        run: go test ./... -coverprofile=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  build:
    name: Build Container
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Install ko
        run: |
          curl -L https://github.com/google/ko/releases/download/v0.15.1/ko_0.15.1_Linux_x86_64.tar.gz | tar xzf - ko
          chmod +x ./ko
          sudo mv ko /usr/local/bin/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/thrivemarket/template-resolver:latest
            ghcr.io/thrivemarket/template-resolver:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Install ko
        run: |
          curl -L https://github.com/google/ko/releases/download/v0.15.1/ko_0.15.1_Linux_x86_64.tar.gz | tar xzf - ko
          chmod +x ./ko
          sudo mv ko /usr/local/bin/

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Set up KinD cluster
        run: |
          # Start with a clean slate
          kind delete cluster --name template-resolver || true
          
          # Create a new cluster with more resources for stability
          kind create cluster --name template-resolver --config=- <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
            - containerPort: 443
              hostPort: 443
          EOF
          
          # Install Tekton with proper error handling
          echo "Installing Tekton Pipelines..."
          kubectl apply --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
          
          # Wait for Tekton to be ready with checks
          echo "Waiting for Tekton namespace..."
          timeout 60s bash -c 'until kubectl get namespace tekton-pipelines 2>/dev/null; do sleep 2; done'
          
          echo "Waiting for Tekton controller deployment..."
          timeout 120s bash -c 'until kubectl get deployment tekton-pipelines-controller -n tekton-pipelines 2>/dev/null; do sleep 2; done'
          
          echo "Waiting for controller to be available..."
          kubectl wait --for=condition=available deployment/tekton-pipelines-controller -n tekton-pipelines --timeout=180s || echo "Timed out waiting, but continuing..."

      - name: Build and deploy resolver
        run: |
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            # Use the container we just built and pushed
            sed -i "s|image:.*|image: ghcr.io/thrivemarket/template-resolver:${{ github.sha }}|g" config/deployment.yaml
          else
            # For PRs, build locally in kind
            export KO_DOCKER_REPO=kind.local
            task container:build
          fi
          kubectl apply -f config/

      - name: Run integration tests
        run: task test:e2e
